
Q: How can I build debug applications with non-debug libraries?

A: During development, you will normally want to build your
application code with debugging enabled.  However, you may be
using non-debug versions of the ACE, TAO, and CIAO libraries.
Depending upon your platform and development environment,
special care must be taken to make sure your debug-enabled
application can link against non-debug ACE, TAO, and CIAO
libraries.<br/><br/>

On platforms that use GNU Make, all you have to do to enable
debugging in your application is set the <code>debug</code>
build flag to <code>1</code> when you build your application
code.  You can do this by setting <code>debug=1</code> on the
<code>make</code> command line, as follows:<br/>

<pre>
make debug=1
</pre>

Or, you can set <code>debug=1</code> in your
<code>platform_macros.GNU</code> file when you build your
application.  <em>Note: If you have <code>debug=1</code> in
<code>platform_macros.GNU</code> when you build the ACE, TAO,
and CIAO libraries, they will be built with debugging enabled,
too.</em><br/><br/>

On some platforms, such as Windows with Visual C++, the ACE,
TAO, and CIAO library names may have a <em>modifier</em>
appended to the library name to indicate whether it was built
with a debug, static, MFC, or some other configuration.  For
example, in a debug build, the name of the ACE shared library
will be <code><strong>ACEd.dll</strong></code>, whereas in a
non-debug (release) build, the name of the ACE shared library
will be <code><strong>ACE.dll</strong></code>.<br/><br/>

On these platforms, if you build your application with a debug
configuration, and you are using project files generated by
MPC, the linker will, by default, look for libraries with the
"d" debug modifier appended to the library name.  If you are
building your debug application against non-debug libraries,
you need to tell the linker to look for the unmodified library
names.  You can do this by directly editing the project
settings (e.g., to remove the "d" from the library names).
Or, you can use the
<code><strong>-value_template</strong></code> MPC option to
override the default definition of the library modifier when
you generate your project files.<br/><br/>

For example, suppose your application's MPC workspace file is
<code>MyApp.mwc</code> and suppose you are using Visual C++
7.1.  If you want to build your application against the same
set of non-debug ACE, TAO, and CIAO libraries, regardless of
whether you build the debug or release configuration, you can
use the following command to generate your application's
project and solution files:<br/>

<pre>
$ACE_ROOT/bin/mwc.pl -type vc71 -value_template lib_modifier=
</pre>

The <code>-value_template</code> option in the above command
sets the value of the <code>lib_modifier</code> template
variable to an empty string, which causes no modifier to be
added to the library names with which your application will
link, regardless of which configuration (debug or release) you
build.<br/><br/>

Watch out for build problems if you have any settings in your
<code>config.h</code> file that depend upon having debugging
enabled, for example:<br/>

<pre>
#if defined(_DEBUG)
#undef __ACE_INLINE__
#endif 
</pre>

For more information on MPC, see the MPC documentation and the
MPC FAQ:<br/><br/>

<a href="http://download.ociweb.com/MPC">http://download.ociweb.com/MPC</a><br/>
<a href="http://www.ociweb.com/products/mpc/faq.html">http://www.ociweb.com/products/mpc/faq.html</a>

